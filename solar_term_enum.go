// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package chronos

import (
	"fmt"
)

const (
	// SolarTermXiaoHan is a SolarTerm of type XiaoHan.
	SolarTermXiaoHan SolarTerm = iota
	// SolarTermDaHan is a SolarTerm of type DaHan.
	SolarTermDaHan
	// SolarTermLiChun is a SolarTerm of type LiChun.
	SolarTermLiChun
	// SolarTermYuShui is a SolarTerm of type YuShui.
	SolarTermYuShui
	// SolarTermJingZhe is a SolarTerm of type JingZhe.
	SolarTermJingZhe
	// SolarTermChunFen is a SolarTerm of type ChunFen.
	SolarTermChunFen
	// SolarTermQingMing is a SolarTerm of type QingMing.
	SolarTermQingMing
	// SolarTermGuYu is a SolarTerm of type GuYu.
	SolarTermGuYu
	// SolarTermLiXia is a SolarTerm of type LiXia.
	SolarTermLiXia
	// SolarTermXiaoMan is a SolarTerm of type XiaoMan.
	SolarTermXiaoMan
	// SolarTermMangZhong is a SolarTerm of type MangZhong.
	SolarTermMangZhong
	// SolarTermXiaZhi is a SolarTerm of type XiaZhi.
	SolarTermXiaZhi
	// SolarTermXiaoShu is a SolarTerm of type XiaoShu.
	SolarTermXiaoShu
	// SolarTermDaShu is a SolarTerm of type DaShu.
	SolarTermDaShu
	// SolarTermLiQiu is a SolarTerm of type LiQiu.
	SolarTermLiQiu
	// SolarTermChuShu is a SolarTerm of type ChuShu.
	SolarTermChuShu
	// SolarTermBaiLu is a SolarTerm of type BaiLu.
	SolarTermBaiLu
	// SolarTermQiuFen is a SolarTerm of type QiuFen.
	SolarTermQiuFen
	// SolarTermHanLu is a SolarTerm of type HanLu.
	SolarTermHanLu
	// SolarTermShuangJiang is a SolarTerm of type ShuangJiang.
	SolarTermShuangJiang
	// SolarTermLiDong is a SolarTerm of type LiDong.
	SolarTermLiDong
	// SolarTermXiaoXue is a SolarTerm of type XiaoXue.
	SolarTermXiaoXue
	// SolarTermDaXue is a SolarTerm of type DaXue.
	SolarTermDaXue
	// SolarTermDongZhi is a SolarTerm of type DongZhi.
	SolarTermDongZhi
)

const _SolarTermName = "XiaoHanDaHanLiChunYuShuiJingZheChunFenQingMingGuYuLiXiaXiaoManMangZhongXiaZhiXiaoShuDaShuLiQiuChuShuBaiLuQiuFenHanLuShuangJiangLiDongXiaoXueDaXueDongZhi"

var _SolarTermMap = map[SolarTerm]string{
	SolarTermXiaoHan:     _SolarTermName[0:7],
	SolarTermDaHan:       _SolarTermName[7:12],
	SolarTermLiChun:      _SolarTermName[12:18],
	SolarTermYuShui:      _SolarTermName[18:24],
	SolarTermJingZhe:     _SolarTermName[24:31],
	SolarTermChunFen:     _SolarTermName[31:38],
	SolarTermQingMing:    _SolarTermName[38:46],
	SolarTermGuYu:        _SolarTermName[46:50],
	SolarTermLiXia:       _SolarTermName[50:55],
	SolarTermXiaoMan:     _SolarTermName[55:62],
	SolarTermMangZhong:   _SolarTermName[62:71],
	SolarTermXiaZhi:      _SolarTermName[71:77],
	SolarTermXiaoShu:     _SolarTermName[77:84],
	SolarTermDaShu:       _SolarTermName[84:89],
	SolarTermLiQiu:       _SolarTermName[89:94],
	SolarTermChuShu:      _SolarTermName[94:100],
	SolarTermBaiLu:       _SolarTermName[100:105],
	SolarTermQiuFen:      _SolarTermName[105:111],
	SolarTermHanLu:       _SolarTermName[111:116],
	SolarTermShuangJiang: _SolarTermName[116:127],
	SolarTermLiDong:      _SolarTermName[127:133],
	SolarTermXiaoXue:     _SolarTermName[133:140],
	SolarTermDaXue:       _SolarTermName[140:145],
	SolarTermDongZhi:     _SolarTermName[145:152],
}

// String implements the Stringer interface.
func (x SolarTerm) String() string {
	if str, ok := _SolarTermMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SolarTerm(%d)", x)
}

var _SolarTermValue = map[string]SolarTerm{
	_SolarTermName[0:7]:     SolarTermXiaoHan,
	_SolarTermName[7:12]:    SolarTermDaHan,
	_SolarTermName[12:18]:   SolarTermLiChun,
	_SolarTermName[18:24]:   SolarTermYuShui,
	_SolarTermName[24:31]:   SolarTermJingZhe,
	_SolarTermName[31:38]:   SolarTermChunFen,
	_SolarTermName[38:46]:   SolarTermQingMing,
	_SolarTermName[46:50]:   SolarTermGuYu,
	_SolarTermName[50:55]:   SolarTermLiXia,
	_SolarTermName[55:62]:   SolarTermXiaoMan,
	_SolarTermName[62:71]:   SolarTermMangZhong,
	_SolarTermName[71:77]:   SolarTermXiaZhi,
	_SolarTermName[77:84]:   SolarTermXiaoShu,
	_SolarTermName[84:89]:   SolarTermDaShu,
	_SolarTermName[89:94]:   SolarTermLiQiu,
	_SolarTermName[94:100]:  SolarTermChuShu,
	_SolarTermName[100:105]: SolarTermBaiLu,
	_SolarTermName[105:111]: SolarTermQiuFen,
	_SolarTermName[111:116]: SolarTermHanLu,
	_SolarTermName[116:127]: SolarTermShuangJiang,
	_SolarTermName[127:133]: SolarTermLiDong,
	_SolarTermName[133:140]: SolarTermXiaoXue,
	_SolarTermName[140:145]: SolarTermDaXue,
	_SolarTermName[145:152]: SolarTermDongZhi,
}

// ParseSolarTerm attempts to convert a string to a SolarTerm.
func ParseSolarTerm(name string) (SolarTerm, error) {
	if x, ok := _SolarTermValue[name]; ok {
		return x, nil
	}
	return SolarTerm(0), fmt.Errorf("%s is not a valid SolarTerm", name)
}
