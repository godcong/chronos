// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package chronos

import (
	"fmt"
)

const (
	// SolarTermLiChun is a SolarTerm of type LiChun.
	SolarTermLiChun SolarTerm = iota
	// SolarTermYuShui is a SolarTerm of type YuShui.
	SolarTermYuShui
	// SolarTermJingZhe is a SolarTerm of type JingZhe.
	SolarTermJingZhe
	// SolarTermChunFen is a SolarTerm of type ChunFen.
	SolarTermChunFen
	// SolarTermQingMing is a SolarTerm of type QingMing.
	SolarTermQingMing
	// SolarTermGuYu is a SolarTerm of type GuYu.
	SolarTermGuYu
	// SolarTermLiXia is a SolarTerm of type LiXia.
	SolarTermLiXia
	// SolarTermXiaoMan is a SolarTerm of type XiaoMan.
	SolarTermXiaoMan
	// SolarTermMangZhong is a SolarTerm of type MangZhong.
	SolarTermMangZhong
	// SolarTermXiaZhi is a SolarTerm of type XiaZhi.
	SolarTermXiaZhi
	// SolarTermXiaoShu is a SolarTerm of type XiaoShu.
	SolarTermXiaoShu
	// SolarTermDaShu is a SolarTerm of type DaShu.
	SolarTermDaShu
	// SolarTermLiQiu is a SolarTerm of type LiQiu.
	SolarTermLiQiu
	// SolarTermChuShu is a SolarTerm of type ChuShu.
	SolarTermChuShu
	// SolarTermBaiLu is a SolarTerm of type BaiLu.
	SolarTermBaiLu
	// SolarTermQiuFen is a SolarTerm of type QiuFen.
	SolarTermQiuFen
	// SolarTermHanLu is a SolarTerm of type HanLu.
	SolarTermHanLu
	// SolarTermShuangJiang is a SolarTerm of type ShuangJiang.
	SolarTermShuangJiang
	// SolarTermLiDong is a SolarTerm of type LiDong.
	SolarTermLiDong
	// SolarTermXiaoXue is a SolarTerm of type XiaoXue.
	SolarTermXiaoXue
	// SolarTermDaXue is a SolarTerm of type DaXue.
	SolarTermDaXue
	// SolarTermDongZhi is a SolarTerm of type DongZhi.
	SolarTermDongZhi
	// SolarTermXiaoHan is a SolarTerm of type XiaoHan.
	SolarTermXiaoHan
	// SolarTermDaHan is a SolarTerm of type DaHan.
	SolarTermDaHan
	// SolarTermMax is a SolarTerm of type Max.
	SolarTermMax
)

const _SolarTermName = "LiChunYuShuiJingZheChunFenQingMingGuYuLiXiaXiaoManMangZhongXiaZhiXiaoShuDaShuLiQiuChuShuBaiLuQiuFenHanLuShuangJiangLiDongXiaoXueDaXueDongZhiXiaoHanDaHanMax"

var _SolarTermMap = map[SolarTerm]string{
	SolarTermLiChun:      _SolarTermName[0:6],
	SolarTermYuShui:      _SolarTermName[6:12],
	SolarTermJingZhe:     _SolarTermName[12:19],
	SolarTermChunFen:     _SolarTermName[19:26],
	SolarTermQingMing:    _SolarTermName[26:34],
	SolarTermGuYu:        _SolarTermName[34:38],
	SolarTermLiXia:       _SolarTermName[38:43],
	SolarTermXiaoMan:     _SolarTermName[43:50],
	SolarTermMangZhong:   _SolarTermName[50:59],
	SolarTermXiaZhi:      _SolarTermName[59:65],
	SolarTermXiaoShu:     _SolarTermName[65:72],
	SolarTermDaShu:       _SolarTermName[72:77],
	SolarTermLiQiu:       _SolarTermName[77:82],
	SolarTermChuShu:      _SolarTermName[82:88],
	SolarTermBaiLu:       _SolarTermName[88:93],
	SolarTermQiuFen:      _SolarTermName[93:99],
	SolarTermHanLu:       _SolarTermName[99:104],
	SolarTermShuangJiang: _SolarTermName[104:115],
	SolarTermLiDong:      _SolarTermName[115:121],
	SolarTermXiaoXue:     _SolarTermName[121:128],
	SolarTermDaXue:       _SolarTermName[128:133],
	SolarTermDongZhi:     _SolarTermName[133:140],
	SolarTermXiaoHan:     _SolarTermName[140:147],
	SolarTermDaHan:       _SolarTermName[147:152],
	SolarTermMax:         _SolarTermName[152:155],
}

// String implements the Stringer interface.
func (x SolarTerm) String() string {
	if str, ok := _SolarTermMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SolarTerm(%d)", x)
}

var _SolarTermValue = map[string]SolarTerm{
	_SolarTermName[0:6]:     SolarTermLiChun,
	_SolarTermName[6:12]:    SolarTermYuShui,
	_SolarTermName[12:19]:   SolarTermJingZhe,
	_SolarTermName[19:26]:   SolarTermChunFen,
	_SolarTermName[26:34]:   SolarTermQingMing,
	_SolarTermName[34:38]:   SolarTermGuYu,
	_SolarTermName[38:43]:   SolarTermLiXia,
	_SolarTermName[43:50]:   SolarTermXiaoMan,
	_SolarTermName[50:59]:   SolarTermMangZhong,
	_SolarTermName[59:65]:   SolarTermXiaZhi,
	_SolarTermName[65:72]:   SolarTermXiaoShu,
	_SolarTermName[72:77]:   SolarTermDaShu,
	_SolarTermName[77:82]:   SolarTermLiQiu,
	_SolarTermName[82:88]:   SolarTermChuShu,
	_SolarTermName[88:93]:   SolarTermBaiLu,
	_SolarTermName[93:99]:   SolarTermQiuFen,
	_SolarTermName[99:104]:  SolarTermHanLu,
	_SolarTermName[104:115]: SolarTermShuangJiang,
	_SolarTermName[115:121]: SolarTermLiDong,
	_SolarTermName[121:128]: SolarTermXiaoXue,
	_SolarTermName[128:133]: SolarTermDaXue,
	_SolarTermName[133:140]: SolarTermDongZhi,
	_SolarTermName[140:147]: SolarTermXiaoHan,
	_SolarTermName[147:152]: SolarTermDaHan,
	_SolarTermName[152:155]: SolarTermMax,
}

// ParseSolarTerm attempts to convert a string to a SolarTerm.
func ParseSolarTerm(name string) (SolarTerm, error) {
	if x, ok := _SolarTermValue[name]; ok {
		return x, nil
	}
	return SolarTerm(0), fmt.Errorf("%s is not a valid SolarTerm", name)
}
