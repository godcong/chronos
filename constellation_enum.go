// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package chronos

import (
	"fmt"
)

const (
	// ConstellationCapricorn is a Constellation of type Capricorn.
	ConstellationCapricorn Constellation = iota
	// ConstellationAquarius is a Constellation of type Aquarius.
	ConstellationAquarius
	// ConstellationPisces is a Constellation of type Pisces.
	ConstellationPisces
	// ConstellationAries is a Constellation of type Aries.
	ConstellationAries
	// ConstellationTaurus is a Constellation of type Taurus.
	ConstellationTaurus
	// ConstellationGemini is a Constellation of type Gemini.
	ConstellationGemini
	// ConstellationCancer is a Constellation of type Cancer.
	ConstellationCancer
	// ConstellationLeo is a Constellation of type Leo.
	ConstellationLeo
	// ConstellationVirgo is a Constellation of type Virgo.
	ConstellationVirgo
	// ConstellationLibra is a Constellation of type Libra.
	ConstellationLibra
	// ConstellationScorpio is a Constellation of type Scorpio.
	ConstellationScorpio
	// ConstellationSagittarius is a Constellation of type Sagittarius.
	ConstellationSagittarius
)

const _ConstellationName = "CapricornAquariusPiscesAriesTaurusGeminiCancerLeoVirgoLibraScorpioSagittarius"

var _ConstellationMap = map[Constellation]string{
	ConstellationCapricorn:   _ConstellationName[0:9],
	ConstellationAquarius:    _ConstellationName[9:17],
	ConstellationPisces:      _ConstellationName[17:23],
	ConstellationAries:       _ConstellationName[23:28],
	ConstellationTaurus:      _ConstellationName[28:34],
	ConstellationGemini:      _ConstellationName[34:40],
	ConstellationCancer:      _ConstellationName[40:46],
	ConstellationLeo:         _ConstellationName[46:49],
	ConstellationVirgo:       _ConstellationName[49:54],
	ConstellationLibra:       _ConstellationName[54:59],
	ConstellationScorpio:     _ConstellationName[59:66],
	ConstellationSagittarius: _ConstellationName[66:77],
}

// String implements the Stringer interface.
func (x Constellation) String() string {
	if str, ok := _ConstellationMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Constellation(%d)", x)
}

var _ConstellationValue = map[string]Constellation{
	_ConstellationName[0:9]:   ConstellationCapricorn,
	_ConstellationName[9:17]:  ConstellationAquarius,
	_ConstellationName[17:23]: ConstellationPisces,
	_ConstellationName[23:28]: ConstellationAries,
	_ConstellationName[28:34]: ConstellationTaurus,
	_ConstellationName[34:40]: ConstellationGemini,
	_ConstellationName[40:46]: ConstellationCancer,
	_ConstellationName[46:49]: ConstellationLeo,
	_ConstellationName[49:54]: ConstellationVirgo,
	_ConstellationName[54:59]: ConstellationLibra,
	_ConstellationName[59:66]: ConstellationScorpio,
	_ConstellationName[66:77]: ConstellationSagittarius,
}

// ParseConstellation attempts to convert a string to a Constellation.
func ParseConstellation(name string) (Constellation, error) {
	if x, ok := _ConstellationValue[name]; ok {
		return x, nil
	}
	return Constellation(0), fmt.Errorf("%s is not a valid Constellation", name)
}
